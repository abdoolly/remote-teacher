// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateSubject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createSubject(data: SubjectCreateInput!): Subject!
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateManySubjects(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  subject(where: SubjectWhereUniqueInput!): Subject
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subject {
  _id: ID!
  name: String!
  ar_name: String
  photoUrl: String
  grade: String
}

type SubjectConnection {
  pageInfo: PageInfo!
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  _id: ID
  name: String!
  ar_name: String
  photoUrl: String
  grade: String
}

input SubjectCreateManyInput {
  create: [SubjectCreateInput!]
  connect: [SubjectWhereUniqueInput!]
}

type SubjectEdge {
  node: Subject!
  cursor: String!
}

enum SubjectOrderByInput {
  _id_ASC
  _id_DESC
  name_ASC
  name_DESC
  ar_name_ASC
  ar_name_DESC
  photoUrl_ASC
  photoUrl_DESC
  grade_ASC
  grade_DESC
}

type SubjectPreviousValues {
  _id: ID!
  name: String!
  ar_name: String
  photoUrl: String
  grade: String
}

input SubjectScalarWhereInput {
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  ar_name: String
  ar_name_not: String
  ar_name_in: [String!]
  ar_name_not_in: [String!]
  ar_name_lt: String
  ar_name_lte: String
  ar_name_gt: String
  ar_name_gte: String
  ar_name_contains: String
  ar_name_not_contains: String
  ar_name_starts_with: String
  ar_name_not_starts_with: String
  ar_name_ends_with: String
  ar_name_not_ends_with: String
  photoUrl: String
  photoUrl_not: String
  photoUrl_in: [String!]
  photoUrl_not_in: [String!]
  photoUrl_lt: String
  photoUrl_lte: String
  photoUrl_gt: String
  photoUrl_gte: String
  photoUrl_contains: String
  photoUrl_not_contains: String
  photoUrl_starts_with: String
  photoUrl_not_starts_with: String
  photoUrl_ends_with: String
  photoUrl_not_ends_with: String
  grade: String
  grade_not: String
  grade_in: [String!]
  grade_not_in: [String!]
  grade_lt: String
  grade_lte: String
  grade_gt: String
  grade_gte: String
  grade_contains: String
  grade_not_contains: String
  grade_starts_with: String
  grade_not_starts_with: String
  grade_ends_with: String
  grade_not_ends_with: String
  AND: [SubjectScalarWhereInput!]
  OR: [SubjectScalarWhereInput!]
  NOT: [SubjectScalarWhereInput!]
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

input SubjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SubjectWhereInput
  AND: [SubjectSubscriptionWhereInput!]
}

input SubjectUpdateDataInput {
  name: String
  ar_name: String
  photoUrl: String
  grade: String
}

input SubjectUpdateInput {
  name: String
  ar_name: String
  photoUrl: String
  grade: String
}

input SubjectUpdateManyDataInput {
  name: String
  ar_name: String
  photoUrl: String
  grade: String
}

input SubjectUpdateManyInput {
  create: [SubjectCreateInput!]
  update: [SubjectUpdateWithWhereUniqueNestedInput!]
  upsert: [SubjectUpsertWithWhereUniqueNestedInput!]
  delete: [SubjectWhereUniqueInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  deleteMany: [SubjectScalarWhereInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
}

input SubjectUpdateManyMutationInput {
  name: String
  ar_name: String
  photoUrl: String
  grade: String
}

input SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput!
  data: SubjectUpdateManyDataInput!
}

input SubjectUpdateWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateDataInput!
}

input SubjectUpsertWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateDataInput!
  create: SubjectCreateInput!
}

input SubjectWhereInput {
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  ar_name: String
  ar_name_not: String
  ar_name_in: [String!]
  ar_name_not_in: [String!]
  ar_name_lt: String
  ar_name_lte: String
  ar_name_gt: String
  ar_name_gte: String
  ar_name_contains: String
  ar_name_not_contains: String
  ar_name_starts_with: String
  ar_name_not_starts_with: String
  ar_name_ends_with: String
  ar_name_not_ends_with: String
  photoUrl: String
  photoUrl_not: String
  photoUrl_in: [String!]
  photoUrl_not_in: [String!]
  photoUrl_lt: String
  photoUrl_lte: String
  photoUrl_gt: String
  photoUrl_gte: String
  photoUrl_contains: String
  photoUrl_not_contains: String
  photoUrl_starts_with: String
  photoUrl_not_starts_with: String
  photoUrl_ends_with: String
  photoUrl_not_ends_with: String
  grade: String
  grade_not: String
  grade_in: [String!]
  grade_not_in: [String!]
  grade_lt: String
  grade_lte: String
  grade_gt: String
  grade_gte: String
  grade_contains: String
  grade_not_contains: String
  grade_starts_with: String
  grade_not_starts_with: String
  grade_ends_with: String
  grade_not_ends_with: String
  AND: [SubjectWhereInput!]
}

input SubjectWhereUniqueInput {
  _id: ID
}

type Subscription {
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  _id: ID!
  fullName: String
  phone: String!
  userType: UserType
  password: String
  grade: String
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  _id: ID
  fullName: String
  phone: String!
  userType: UserType
  password: String
  grade: String
  subjects: SubjectCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  _id_ASC
  _id_DESC
  fullName_ASC
  fullName_DESC
  phone_ASC
  phone_DESC
  userType_ASC
  userType_DESC
  password_ASC
  password_DESC
  grade_ASC
  grade_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  _id: ID!
  fullName: String
  phone: String!
  userType: UserType
  password: String
  grade: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

enum UserType {
  TEACHER
  STUDENT
}

input UserUpdateInput {
  fullName: String
  phone: String
  userType: UserType
  password: String
  grade: String
  subjects: SubjectUpdateManyInput
}

input UserUpdateManyMutationInput {
  fullName: String
  phone: String
  userType: UserType
  password: String
  grade: String
}

input UserWhereInput {
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  userType: UserType
  userType_not: UserType
  userType_in: [UserType!]
  userType_not_in: [UserType!]
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  grade: String
  grade_not: String
  grade_in: [String!]
  grade_not_in: [String!]
  grade_lt: String
  grade_lte: String
  grade_gt: String
  grade_gte: String
  grade_contains: String
  grade_not_contains: String
  grade_starts_with: String
  grade_not_starts_with: String
  grade_ends_with: String
  grade_not_ends_with: String
  subjects_some: SubjectWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  _id: ID
  phone: String
}
`